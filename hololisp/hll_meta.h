//
// hll_debug.h
//
// Debug information is generated for following objects:
// * objects created by parser
//
// Examples when we expect meaningful error message:
// * compile error - source location
// * invalid function invocation - where the function lambda was created
// * runtime error - compiled bytecode mapped to source location
//
#ifndef HLL_DEBUG_H
#define HLL_DEBUG_H

#include <stdarg.h>

#include "hll_hololisp.h"

struct hll_bytecode;
struct hll_call_frame;

typedef struct hll_loc {
  uint32_t translation_unit;
  uint32_t offset;
} hll_loc;

// Bytecode contains source location in order to provide meaningful error
// messages. This information is encoded in run-length encoding based format.
// This structure describes unit of rle encoding, specifying locations for
// next 'length' operands.
typedef struct {
  uint32_t length;
  uint32_t loc_idx;
} hll_bytecode_rle;

// Debug Translation Unit.
typedef struct {
  const char *source;
  const char *name;
  // We encode information about source of the bytecode via RLE-encoded
  // array. Each RLE 64-bit entry consists of two 32-bit integers.
  // First integer is producer location, second is count of produced
  // instructions.
  // When executing some instruction fails, we do linear O(n) search in
  // RLE to find producer location. Location itself contains index of
  // translation unit, which VM can use to find file or string that was the
  // source for this generated bytecode.
  // Then debug system does linear O(n) search inside source string in order to
  // find line and column number.
  // All that information accompanied with one got from runtime system (call
  // stack, memory usage etc.) can be used to display user-friendly thorough
  // error message.
  struct hll_loc *locs;
  hll_bytecode_rle *loc_rle;
} hll_dtu;

enum {
  HLL_DEBUG_DIAGNOSTICS_COLORED = 0x1,
};

typedef struct hll_meta_storage {
  struct hll_vm *vm;

  hll_dtu *dtus;
  uint32_t flags;

  uint32_t error_count;
} hll_meta_storage;

hll_meta_storage *hll_make_debug(struct hll_vm *vm, uint32_t flags);
void hll_delete_debug(hll_meta_storage *ds);
void hll_reset_debug(hll_meta_storage *ds);

uint32_t hll_ds_init_tu(hll_meta_storage *ds, const char *source,
                        const char *name);

// Used to report error in current state contained by vm.
// vm must have current_filename field present if message needs to include
// source location.
// offset specifies byte offset of reported location in file.
// len specifies length of reported part (e.g. token).
void hll_report_errorv(hll_meta_storage *debug, hll_loc loc, const char *fmt,
                       va_list args);
void hll_report_error(hll_meta_storage *debug, hll_loc loc, const char *fmt,
                      ...) __attribute__((format(printf, 3, 4)));

void hll_report_runtime_errorv(hll_meta_storage *debug, const char *fmt,
                               va_list args);

void hll_debug_print_summary(hll_meta_storage *debug);

void hll_bytecode_add_loc(hll_meta_storage *debug, uint32_t tu,
                          size_t op_length, uint32_t compilation_unit,
                          uint32_t offset);
uint32_t hll_bytecode_get_loc(hll_meta_storage *debug, uint32_t tu,
                              size_t op_idx);

#endif
