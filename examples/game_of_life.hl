;;
;; Game of life
;; hololisp version
;;

(define *width* 40)
(define *height* 40)

(define (map functor obj)
  (when obj
    (cons (functor (car obj))
          (map functor (cdr obj)))))

(define (range-lo lo hi)
  (unless (<= hi lo)
    (cons lo (range-lo (+ lo 1) hi))))

(define (range hi)
  (range-lo 0 hi))

(define (print-board board)
  (when board
    (print (map (lambda (it) (if (zero? it) '_ '@)) (car board)))
    (print-board (cdr board))))

(define (alive-at board x y)
  (and (>= x 0)
       (< x *width*)
       (>= y 0)
       (< y *height*)
       (= (nth x (nth y board))
          1)))

(define (neighbours board x y)
  (let ((at (lambda (x y) 
              (if (alive-at board x y) 1 0))))
      (+ (at (- x 1) (- y 1))
         (at (- x 1) y)
         (at (- x 1) (+ y 1))
         (at x (- y 1))
         (at x (+ y 1))
         (at (+ x 1) (- y 1))
         (at (+ x 1) y)
         (at (+ x 1) (+ y 1)))))

(define (should-be-alive board x y)
  (let ((c (neighbours board x y)))
    (if (alive-at board x y)
      (or (= c 2) (= c 3))
      (= c 3))))

(define (next-state board x y)
  (if (should-be-alive board x y)
    1
    0))

(define (simulate board)
  (map (lambda (y) 
         (map (lambda (x) 
                (next-state board x y))
              (range *width*)))
       (range *height*)))

(define (run board)
  (clear)
  (print-board board)
  (run (simulate board)))

(define (create-row width)
  (unless (<= width 0)
    (cons (random 2) (create-row (- width 1)))))

(define (create-board width height)
  (unless (<= height 0)
    (cons (create-row width) (create-board width (- height 1)))))

(run (create-board *width* *height*))