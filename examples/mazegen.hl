;;
;; Maze generator
;; hololisp version
;;

(define VISITED 1)
(define WIDTH 10)
(define HEIGHT 10)

(define (print-board board)
  (when board
    (print (map (lambda (it) (if (= it VISITED) '- '@)) (car board)))
    (print-board (cdr board))))

(define (set-at! board x y value)
  (set! (nth x (nth y board)) value))

(define (get-at board x y)
  (nth x (nth y board)))

(define (is-empty? board x y)
  (/= (get-at board x y) VISITED))

(define (create-row width)
  (unless (<= width 0)
    (cons 0 (create-row (- width 1)))))

(define (create-board width height)
  (unless (<= height 0)
    (cons (create-row width) (create-board width (- height 1)))))

(define (neighbours-4- last-pos)
  (let ((x (car last-pos))
         (y (cdr last-pos)))
    (list (cons (- x 1) y)
          (cons x (- y 1))
          (cons x (+ y 1))
          (cons (+ x 1) y))))

(define (neighbours-corners- last-pos)
  (let ((x (car last-pos))
         (y (cdr last-pos)))
    (list (cons (- x 1) (- y 1))
          (cons (- x 1) (+ y 1))
          (cons (+ x 1) (- y 1))
          (cons (+ x 1) (+ y 1)))))

(define (neighbours-corners last-pos)
  (filter (lambda (pos) (and (>= (car pos) 0)
                          (< (car pos) WIDTH)
                          (>= (cdr pos) 0)
                          (< (cdr pos) HEIGHT)))
    (neighbours-corners- last-pos)))

(define (neighbours-4 last-pos)
  (filter (lambda (pos) (and (>= (car pos) 0)
                          (< (car pos) WIDTH)
                          (>= (cdr pos) 0)
                          (< (cdr pos) HEIGHT)))
    (neighbours-4- last-pos)))

(define (contains where what)
  (when where
    (or (and (= (caar where) (car what))
          (= (cdar where) (cdr what)))
      (contains (cdr where) what))))

(define (next-possible-cells board last-pos)
  (filter (lambda (pos)
            (and
              ; cell itself is empty
              (is-empty? board (car pos) (cdr pos))
              ; cell neighbours are either closed or given cell
              (all
                (lambda (pos)
                  (or
                    (and (= (car last-pos) (car pos))
                      (= (cdr last-pos) (cdr pos)))
                    (is-empty? board (car pos) (cdr pos))))
                (neighbours-4 pos))
              ; cell corners are either closed or corners to given cell
              (all
                (lambda (pos)
                  (or
                    (is-empty? board (car pos) (cdr pos))
                    (contains (neighbours-4 last-pos) pos)))
                (neighbours-corners pos))))
    (neighbours-4 last-pos)))

(define (next-pos board last-pos)
  (let ((pos (next-possible-cells board last-pos)))
    (nth (random (length pos)) pos)))

(define (make-path board stack-path)
  (when stack-path
    (let ((new-pos (next-pos board (car stack-path))))
      (if new-pos
        (progn
          (set-at! board (car new-pos) (cdr new-pos) VISITED)
          (make-path board (cons new-pos stack-path)))
        (make-path board (cdr stack-path))))))

(define start-pos-x (random WIDTH))
(define start-pos-y (random WIDTH))
(define board (create-board WIDTH WIDTH))
(set-at! board start-pos-x start-pos-y VISITED)
(define stack (list (cons start-pos-x start-pos-y)))
(make-path board stack)
(print-board board)
