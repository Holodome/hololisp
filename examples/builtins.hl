(defmacro (not x) (list 'if x () 't))                     

(defmacro (when expr . body)                               
  (cons 'if (cons expr (list (cons 'progn body)))))         

(defmacro (unless expr . body)                               
  (cons 'if (cons expr (cons () body))))                       

(define (any? pred lis)                                 
  (when lis                                             
    (or (pred (car lis))                                 
        (any pred (cdr lis)))))                           

(define (all? pred lis)                                           
  (if lis                                                         
      (and (pred (car lis)) (all pred (cdr lis)))                  
      t))                                                           

(define (map fn lis)                                          
  (when lis                                         
    (cons (fn (car lis))                             
          (map fn (cdr lis)))))                       

(defmacro (amap fn-body lis)
  (list 'map (lambda (it) fn-body) lis))

(define (filter pred lis)                                  
  (when lis                                                 
    (let ((value (pred (car lis))))                          
      (if value                                               
          (cons (car lis) (filter pred (cdr lis)))             
          (filter pred (cdr lis))))))                           

(defmacro (remove pred lis)
  (list 'filter (lambda (x) (not (pred x))) lis))

(define (reduce form lis)
  (if (cdr lis)
      (form (car lis) (reduce form (cdr lis)))
      (car lis)))

(define (repeat n x)
  (when (positive? n)
    (cons x (repeat (- n 1) x))))

(define (count pred lis)
  (if lis 
      (+ (if (pred (car lis)) 1 0) (count pred (cdr lis)))
      0))

