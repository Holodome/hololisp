#!/usr/bin/env bash

EXECUTABLE=./build/hololisp

TMPFILE=/tmp/hololisp.lisp

failed=0

panic () {
    echo -n -e '\e[1;31m[ERROR]\e[0m '
    echo "$1"
    failed=1
}

run_test () {
    echo -n "Testing $1 ... "

    echo "$3" > "$TMPFILE"
    error=$("$EXECUTABLE" < "$TMPFILE" 2>&1 > /dev/null)
    if [ -n "$error" ]; then
        echo FAILED
        panic "$error"
        return 
    fi

    result=$("$EXECUTABLE" < "$TMPFILE" 2> /dev/null | tail -1)
    if [ "$result" != "$2" ]; then
        echo FAILED
        panic "'$2' expected, but got '$result'"
        return 
    fi

    echo "ok"
}

run_test "nth nil" "()" "(nth 0 ())"
run_test "nth more than length nil" "()" "(nth 100 ())"
run_test "nth first" "0" "(nth 0 '(0 1 2 3))"
run_test "nth second" "1" "(nth 1 '(0 1 2 3))"
run_test "nth more than length" "()" "(nth 100 '(0 1 2 3))"

run_test "nthcdr nil" "()" "(nth 0 ())"
run_test "nthcdr more than length nil" "()" "(nthcdr 100 ())"
run_test "nthcdr first" "(0 1 2 3)" "(nthcdr 0 '(0 1 2 3))"
run_test "nthcdr second" "(1 2 3)" "(nthcdr 1 '(0 1 2 3))"
run_test "nthcdr more than length" "()" "(nthcdr 100 '(0 1 2 3))"

run_test "any true" "t" "(any (lambda (x) x) '(() 1 () '(1 2 3)))"
run_test "any nil" "()" "(any (lambda (x) x) '(() () () ((lambda () ()))))"

run_test "map" "(1 2 3 4)" "(map (lambda (x) (+ x 1)) '(0 1 2 3))"

exit $failed
